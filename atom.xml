<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://yuncheng1998.github.io</id>
    <title>Gridea</title>
    <updated>2021-04-11T13:53:39.407Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="http://yuncheng1998.github.io"/>
    <link rel="self" href="http://yuncheng1998.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>http://yuncheng1998.github.io/images/avatar.png</logo>
    <icon>http://yuncheng1998.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[增强try-catch]]></title>
        <id>http://yuncheng1998.github.io/post/try-catch/</id>
        <link href="http://yuncheng1998.github.io/post/try-catch/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <content type="html"><![CDATA[<p>在传统的 <code>try-catch-finally</code> 语句中，需要将一些必须执行的步骤放在 <em>finally</em> 语句块中，诸如关闭资源，释放连接等。例如下面代码是将对象序列化到文件中后再反序列化读取出来的步骤，在 <em>finally</em> 语句块中，要判断两个文件流是否成功创建，然后再执行关闭操作，这样造成了代码的啰嗦。</p>
<pre><code class="language-java">public class App {
    private static final String PATH = &quot;/Users/yuncheng/IdeaProjects/leetcode-log/src/main/java/top/wangych/file.in&quot;;
    public static void main(String[] args) {
        ObjectInputStream objectInputStream = null;
        ObjectOutputStream objectOutputStream = null;
        try {
            objectOutputStream = new ObjectOutputStream(new FileOutputStream(PATH));
            objectInputStream= new ObjectInputStream(new FileInputStream(PATH));
            Student student = new Student();
            student.setName(&quot;test&quot;);
            objectOutputStream.writeObject(student);
            student = (Student) objectInputStream.readObject();
            System.out.println(student.getName());

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        } finally {
            if (objectInputStream != null) {
                try {
                    objectInputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            if (objectOutputStream != null) {
                try {
                    objectOutputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

@Data
class Student implements Serializable {

    private static final long serialVersionUID = -8955603390013362711L;
    private String name;
}
</code></pre>
<p>在Java7中提供了增强try语句来释放资源，如下所示</p>
<pre><code class="language-java">public class App {
    private static final String PATH = &quot;/Users/yuncheng/IdeaProjects/leetcode-log/src/main/java/top/wangych/file.in&quot;;
    public static void main(String[] args) {
        try (
          ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(PATH));
          ObjectInputStream objectInputStream= new ObjectInputStream(new FileInputStream(PATH))
        ) {

            Student student = new Student();
            student.setName(&quot;test&quot;);
            objectOutputStream.writeObject(student);
            student = (Student) objectInputStream.readObject();
            System.out.println(student.getName());

        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
</code></pre>
<p>增强try语句是一种语法糖，查看编译后的的代码如下，仍然生成finally语句块来释放资源。释放的方式是调用括号内对象的close()方法，这就要求该类必须实现了 <em>Closeable</em> 接口。<br>
<img src="http://www.wangych.top/upload/2019/7/%E5%A2%9E%E5%BC%BAtry-27866803a9f846d39d87ae63a6e21457.png" alt="增强try" loading="lazy"></p>
<p><a href="https://docs.oracle.com/javase/7/docs/technotes/guides/language/try-with-resources.html">The try-with-resources Statement</a></p>
]]></content>
    </entry>
</feed>